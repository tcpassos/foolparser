package fool;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

parser code {:
    private IntermediateCode code = new IntermediateCode();
    private int tempCount = 0;

    private String newTemp() {
        return "t" + tempCount++;
    }

    public String getIntermediateCode() {
        return code.generate();
    }

    public void report_error(String message, Object info) {
        Symbol symbol = (Symbol) info;
        String error = "Token '" + symbol.value + "' encontrado n√£o esperado.";
        System.err.println(error);
        super.report_error(message, info);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Erro fatal de sintaxe. Parsing abortado.");
    }
:}

terminal CLASS, VOID, INT, BOOL, IF, ELSE, RETURN, EQ, LT, GT, PLUS, TIMES, ASSIGN, NOT, AND, OR, LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON, COMMA, WHILE;
terminal String IDENTIFIER;
terminal Integer INT_CONST;
terminal Boolean TRUE, FALSE;

non terminal program;
non terminal class_decl;
non terminal decl_list;
non terminal declaration;
non terminal var_decl;
non terminal method_decl;
non terminal method_call;
non terminal var_type;
non terminal String stmt;
non terminal stmt_list;
non terminal Expression expr;
non terminal List<Expression> expr_list;
non terminal List<Expression> expr_list_non_empty;
non terminal arg_list;
non terminal arg_list_non_empty;

precedence left ELSE;
precedence nonassoc IF;
precedence left OR;
precedence left AND;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS;
precedence left TIMES;
precedence right NOT;

start with program;

program ::= class_decl;

class_decl ::= LBRACE CLASS IDENTIFIER decl_list RBRACE;

decl_list ::= /* vazio */
            | decl_list declaration;

declaration ::= var_decl
              | method_decl;

var_decl ::= var_type IDENTIFIER SEMICOLON;

method_decl ::= var_type IDENTIFIER LPAREN arg_list RPAREN LBRACE stmt_list RBRACE
              | VOID IDENTIFIER LPAREN arg_list RPAREN LBRACE stmt_list RBRACE;

arg_list ::= /* vazio */
           | arg_list_non_empty;

arg_list_non_empty ::= var_type IDENTIFIER
                     | arg_list_non_empty COMMA var_type IDENTIFIER;

var_type ::= INT
           | BOOL;

method_call ::= IDENTIFIER LPAREN expr_list RPAREN;

stmt_list ::= /* vazio */
            | stmt_list stmt;

stmt ::= IDENTIFIER:id ASSIGN expr:e SEMICOLON
            {:
                RESULT = new AssignmentStatement(id, e).generate();
            :}
       | IF LPAREN expr RPAREN stmt
       | IF LPAREN expr RPAREN stmt ELSE stmt
       | RETURN expr SEMICOLON
       | WHILE LPAREN expr RPAREN stmt
       | method_call SEMICOLON;

expr ::= expr:e1 PLUS expr:e2
          {:
              String temp = newTemp();
              RESULT = new Expression("+", e1.result, e2.result, temp);
          :}
       | expr:e1 TIMES expr:e2
          {:
              String temp = newTemp();
              RESULT = new Expression("*", e1.result, e2.result, temp);
          :}
       | expr:e1 EQ expr:e2
          {:
              String temp = newTemp();
              RESULT = new Expression("==", e1.result, e2.result, temp);
          :}
       | expr:e1 LT expr:e2
          {:
              String temp = newTemp();
              RESULT = new Expression("<", e1.result, e2.result, temp);
          :}
       | expr:e1 GT expr:e2
          {:
              String temp = newTemp();
              RESULT = new Expression(">", e1.result, e2.result, temp);
          :}
       | expr:e1 AND expr:e2
          {:
              String temp = newTemp();
              RESULT = new Expression("and", e1.result, e2.result, temp);
          :}
       | expr:e1 OR expr:e2
          {:
              String temp = newTemp();
              RESULT = new Expression("or", e1.result, e2.result, temp);
          :}
       | NOT expr:e
          {:
              String temp = newTemp();
              RESULT = new Expression("not", e.result, temp);
          :}
       | TRUE
          {:
              RESULT = new Expression("true");
          :}
       | FALSE
          {:
              RESULT = new Expression("false");
          :}
       | INT_CONST:ic
          {:
              RESULT = new Expression(ic.toString());
          :}
       | IDENTIFIER:id
          {:
              RESULT = new Expression(id);
          :}
       | method_call:m
       | LPAREN expr:e RPAREN
          {:
              RESULT = e;
          :};

expr_list ::= /* vazio */
            | expr_list_non_empty;

expr_list_non_empty ::= expr:e
                          {:
                            RESULT = new ArrayList<>();
                            RESULT.add(e);
                          :}
                      | expr_list_non_empty:l COMMA expr:e
                          {:
                            l.add(e);
                            RESULT = l;
                          :};