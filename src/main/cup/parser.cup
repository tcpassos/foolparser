package fool;

import java_cup.runtime.*;

parser code {:
    public void report_error(String message, Object info) {
        Symbol symbol = (Symbol) info;
        String error = "Erro de sintaxe no token '" + symbol.value + "'";
        System.err.println(error);
        super.report_error(message, info);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Erro fatal de sintaxe. Parsing abortado.");
    }
:}

// Declaração de tokens (terminais)
terminal CLASS, VOID, INT, BOOL, IF, ELSE, RETURN, TRUE, FALSE, EQ, LT, GT, PLUS, TIMES, ASSIGN, NOT, AND, OR, LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON, COMMA;
terminal String IDENTIFIER;
terminal Integer INT_CONST;

// Declaração de não-terminais
non terminal program;
non terminal class_decl;
non terminal decl_list;
non terminal declaration;
non terminal var_decl;
non terminal method_decl;
non terminal type;
non terminal stmt;
non terminal stmt_list;
non terminal expr;
non terminal arg_list;
non terminal arg_list_non_empty;
non terminal expr_list;
non terminal expr_list_non_empty;

// Precedências
precedence left ELSE;
precedence nonassoc IF;
precedence left OR;
precedence left AND;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS;
precedence left TIMES;
precedence right NOT;

start with program;

/// Regras de produção

program ::= class_decl
          ;

class_decl ::= LBRACE CLASS IDENTIFIER decl_list RBRACE
             ;

decl_list ::= /* vazio */
            | decl_list declaration
            ;

declaration ::= var_decl
              | method_decl
              ;

var_decl ::= type IDENTIFIER SEMICOLON
           ;

method_decl ::= type IDENTIFIER LPAREN arg_list RPAREN LBRACE stmt_list RBRACE
              ;

arg_list ::= /* vazio */
           | arg_list_non_empty
           ;

arg_list_non_empty ::= type IDENTIFIER
                     | arg_list_non_empty COMMA type IDENTIFIER
                     ;

type ::= INT
       | BOOL
       | VOID
       ;

stmt_list ::= /* vazio */
            | stmt_list stmt
            ;

stmt ::= IDENTIFIER ASSIGN expr SEMICOLON
       | IF LPAREN expr RPAREN stmt
       | IF LPAREN expr RPAREN stmt ELSE stmt
       | RETURN expr SEMICOLON;

expr ::= expr PLUS expr
       | expr TIMES expr
       | expr EQ expr
       | expr LT expr
       | expr GT expr
       | expr AND expr
       | expr OR expr
       | NOT expr
       | TRUE
       | FALSE
       | INT_CONST
       | IDENTIFIER
       | IDENTIFIER LPAREN expr_list RPAREN
       | LPAREN expr RPAREN
       ;

expr_list ::= /* vazio */
            | expr_list_non_empty
            ;

expr_list_non_empty ::= expr
                      | expr_list_non_empty COMMA expr
                      ;